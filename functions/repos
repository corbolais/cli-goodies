#!/bin/bash

CURRENT_DIR=${PWD}

function _repos-help() {
cat << _EOH_

USAGE: repos <command> [arguments]

COMMAND:

--available       list available configurations
--check           list all repos not in mrconfig
--disable         diable a configuration
--enable          enable a configuration
--list            list current configurations
--only            only enable one configuration
--reg             register the current folder to mr

_EOH_
    }

function _file-check() {
    [[ -e ~/.config/mr/available.d/"$1" ]]
}

function _repos-list() {
    ls ~/.config/mr/config.d
}

function _repos-available() {
    ls ~/.config/mr/available.d
}

function _repos-enable() {
    _file-check "$1" && cd ~/.config/mr/config.d/ && ln -s "../available.d/$1" .
}

function _repos-disable() {
    cd ~/.config/mr/config.d/ && rm -f "$1"
}

function _repos-only() {
    _file-check "$1" && /bin/rm -f ~/.config/mr/config.d/* && _repos-enable "$1"
}

function _repos-check() {
    for file in ./*; do
        grep "$file" .mrconfig &>/dev/null || echo "$file";
    done
}

function _repos-reg() {
    local remote

    # Right now, we only support git directories
    if git rev-parse --is-inside-work-tree &> /dev/null; then
        remote=$(git config --get remote.origin.url)
    else
        exit 1
    fi

    # Store the current directory and initialize iterator
    local DIRECTORY_NAME=$(basename $CURRENT_DIR)
    local ITERATOR=$CURRENT_DIR

    # Find a .mrconfig file by climining up the tree
    while [[ $ITERATOR != '/' ]]; do
        if [[ -e .mrconfig ]]; then
            break
        else
            cd ..
            ITERATOR=$PWD
        fi
    done

    # Move back to originial directory
    cd $CURRENT_DIR

    # Add the statements to the .mrconfig file if we are not at root
    if [[ $ITERATOR != '/' ]]; then
        echo ""
        echo "[$CURRENT_DIR]" >> $ITERATOR/.mrconfig
        echo "checkout = git clone '$CURRENT_DIR' '$DIRECTORY_NAME'" >> $ITERATOR/.mrconfig
        echo "adding $DIRECTORY_NAME to $ITERATOR/.mrconfig"
    else
        mr reg
    fi
}

case "$1" in
    ls|list)          _repos-list;;
    e|enable)         _repos-enable "$2";;
    d|disable)        _repos-disable "$2";;
    r|reg)            _repos-reg;;
    a|available)      _repos-available;;
    c|check)          _repos-check;;
    o|only)           _repos-only "$2";;
    *)                  _repos-help;;
esac

# Jump back to the directory from where we started
cd "$CURRENT_DIR"
